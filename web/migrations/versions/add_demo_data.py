"""empty message

Revision ID: 43a870ca369f
Revises: 
Create Date: 2023-03-19 16:24:47.278964

"""
import csv
from alembic import op
import sqlalchemy as sa
import datetime
from electricity_board.models.connection_request import ConnectionRequest
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = "add_demo_data"
down_revision = "43a870ca369f"
branch_labels = None
depends_on = None

Base = declarative_base()


class ConnectionRequest(Base):
    id = sa.Column(sa.Integer, primary_key=True)
    applicant_name = sa.Column(sa.String(100), nullable=False)
    gender = sa.Column(sa.String(100))
    state = sa.Column(sa.String(100))
    pincode = sa.Column(sa.String(100))
    district = sa.Column(sa.String(100))
    ownership = sa.Column(sa.String(100))
    govtid_type = sa.Column(sa.String(100))
    id_number = sa.Column(sa.Integer)
    category = sa.Column(sa.String(100))
    load_applied = sa.Column(sa.String(100))
    date_of_application = sa.Column(sa.String(100))
    Date_of_approval = sa.Column(sa.String(100))
    modified_date = sa.Column(sa.String(100))
    status = sa.Column(sa.String(100))
    reviewer_id = sa.Column(sa.String(100))
    reviewer_name = sa.Column(sa.String(100))
    reviewer_comments = sa.Column(sa.String(100))

    __tablename__ = "connection_request"

    def __init__(
        self,
        id,
        applicant_name,
        gender,
        state,
        pincode,
        district,
        ownership,
        govtid_type,
        id_number,
        category,
        load_applied,
        date_of_application,
        Date_of_approval,
        modified_date,
        status,
        reviewer_id,
        reviewer_name,
        reviewer_comments,
    ):
        self.id = id
        self.applicant_name = applicant_name
        self.gender = gender
        self.state = state
        self.pincode = pincode
        self.district = district
        self.ownership = ownership
        self.govtid_type = govtid_type
        self.id_number = id_number
        self.category = category
        self.load_applied = load_applied
        self.date_of_application = date_of_application
        self.Date_of_approval = Date_of_approval
        self.modified_date = modified_date
        self.status = status
        self.reviewer_id = reviewer_id
        self.reviewer_name = reviewer_name
        self.reviewer_comments = reviewer_comments


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    with open("demo/electricity_board_case_study.csv") as csvfile:
        fieldnames = [
            "ID",
            "Applicant_Name",
            "Gender",
            "District",
            "State",
            "Pincode",
            "Ownership",
            "GovtID_Type",
            "ID_Number",
            "Category",
            "Load_Applied",
            "Date_of_Application",
            "Date_of_Approval",
            "Modified_Date",
            "Status",
            "Reviewer_ID",
            "Reviewer_Name",
            "Reviewer_Comments",
        ]
        reader = csv.DictReader(csvfile, delimiter=",", fieldnames=fieldnames)
        line_count = 0
        for row in reader:
            if line_count == 0:
                line_count += 1
                continue
            user = ConnectionRequest(
                id=row["ID"],
                applicant_name=row["Applicant_Name"],
                gender=row["Gender"],
                state=row["District"],
                pincode=row["State"],
                district=row["Pincode"],
                ownership=row["Ownership"],
                govtid_type=row["GovtID_Type"],
                id_number=row["ID_Number"],
                category=row["Category"],
                load_applied=row["Load_Applied"],
                date_of_application= datetime.datetime.strptime(f"{row['Date_of_Application'].split('-')[0].zfill(2)}-{row['Date_of_Application'].split('-')[1].zfill(2)}-20{row['Date_of_Application'].split('-')[2]}", "%d-%m-%Y").date()
                if row["Date_of_Application"]
                else None,
                Date_of_approval=datetime.datetime.strptime(f"{row['Date_of_Approval'].split('-')[0].zfill(2)}-{row['Date_of_Approval'].split('-')[1].zfill(2)}-20{row['Date_of_Approval'].split('-')[2]}", "%d-%m-%Y").date()
                if row["Date_of_Approval"]
                else None,
                modified_date=datetime.datetime.strptime(f"{row['Modified_Date'].split('-')[0].zfill(2)}-{row['Modified_Date'].split('-')[1].zfill(2)}-20{row['Modified_Date'].split('-')[2]}", "%d-%m-%Y").date()
                if row["Modified_Date"]
                else None,
                status=row["Status"],
                reviewer_id=row["Reviewer_ID"],
                reviewer_name=row["Reviewer_Name"],
                reviewer_comments=row["Reviewer_Comments"],
            )
            session.add(user)
    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("connection_request")
    # ### end Alembic commands ###
